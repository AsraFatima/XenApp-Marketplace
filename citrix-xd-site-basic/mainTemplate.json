 {
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",

  "parameters": {

    // Storage
    "vhdStorageAccount": {
      "type": "string",
      "defaultValue": "[toLower(substring(concat('xenapp',uniqueString(subscription().subscriptionId,resourceGroup().id)), 0, 13))]",
      "metadata": {
        "description": "Specifies the name of the storage account used for virtual machine disks. This has to be a unique name, up to 24 chars, all lowercase."
      }
    },
    "vhdStorageType": {
      "type": "string",
      "defaultValue": "Standard_LRS",
      "allowedValues": [
        "Standard_LRS",
        "Standard_GRS",
        "Standard_RAGRS",
        "Premium_LRS"
      ],
      "metadata": {
        "description": "Specifies the type of storage account, if being created."
      }
    },
    "vhdStorageGroup": {
      "type": "string",
      "defaultValue": "[resourceGroup().name]",
      "metadata": {
        "description": "Specifies the resource group which should contain the storage account."
      }
    },
    "vhdStorageNewOrExisting": {
      "type": "string",
      "defaultValue": "new",
      "allowedValues": [
        "new",
        "existing"
      ],
      "metadata": {
        "description": "Specifies whether the storage account should be created or already exists."
      }
    },
    "userImageContainerName": {
      "type": "string",
      "defaultValue": "images3",
      "metadata": {
        "description": "Specifies a storage container in the account specified by 'vhdStorageAccount' in which user images of XenApp 7.7 reside."
      }
    },
    "imageType": {
      "type": "string",
      "defaultValue": "Gallery",
      "allowedValues": [
        "Gallery",
        "User"
      ],
      "metadata": {
        "description": "Specifies whether the template should deploy from the Azure Marketplace gallery or from user images in the storage account specified by 'vhdStorageAccount."
      }
    },
    "imageQualifier": {
      "type": "string",
      "defaultValue": "",
      "allowedValues": [
        "",
        "-preview"
      ],
      "metadata": {
        "description": "Specifies an additional qualifier to use for Marketplace image references. The value 'preview' is for images in staging, while the default value references production images."
      }
    },
    // Public IP
    "publicDnsName": {
      "type": "string",
      "defaultValue": "[toLower(substring(concat('xenapp', uniqueString(subscription().subscriptionId,resourceGroup().id)), 0, 13))]",
      "metadata": {
        "description": "Specifies a unique public DNS prefix for the deployment. This will produce a FQDN of the form '<publicDnsName>.<location>.cloudapp.azure.com'. Up to 62 chars, digits or dashes, lowercase, should start with a letter: must conform to '^[a-z][a-z0-9-]{1,61}[a-z0-9]$'."
      }
    },
    "publicIpGroup": {
      "type": "string",
      "defaultValue": "[resourceGroup().name]",
      "metadata": {
        "description": "Specifies the resource group which should contain the public IP."
      }
    },
    "publicIpName": {
      "type": "string",
      "defaultValue": "PublicIp",
      "metadata": {
        "description": "Specifies the resource name for the public IP. New IPs will take this name, while references to existing ones should be valid."
      }
    },
    "publicIpNewOrExisting": {
      "type": "string",
      "defaultValue": "new",
      "allowedValues": [
        "new",
        "existing"
      ],
      "metadata": {
        "description": "Specifies whether the public IP should be created or already exists."
      }
    },

    // Infrastructure
    "machineSize": {
      "type": "string",
      "defaultValue": "Standard_A2",
      "metadata": {
        "description": "Specifies the size of the virtual machines (6)."
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Specifies the Location for the deployment."
      }
    },
    // Credentials and domain
    "adminUsername": {
      "type": "string",
      "metadata": {
        "description": "Specifies the name of the administrator for machines, Active Directory domain, NetScaler and XenApp. Exclusion list: 'admin','administrator'. Must be no more than 9 alphanumeric characters."
      }
    },

    "adminPassword": {
      "type": "securestring",
      "metadata": {
        "description": "Specifies the password of the administrator for machines, Active Directory domain, NetScaler and XenApp."
      }
    },

    "domainName": {
      "type": "string",
      "defaultValue": "xenapp.local",
      "metadata": {
        "description": "Specifies the name of the newly created Active Directory domain."
      }
    },

    // XenApp settings
    "siteName": {
      "type": "string",
      "defaultValue": "XenAppOnAzure",
      "metadata": {
        "description": "Specifies the name of the XenApp site."
      }
    },

    "html5Mode": {
      "type": "string",
      "defaultValue": "Fallback",
      "allowedValues": [
        "Always",
        "Fallback",
        "Off"
      ],
      "metadata": {
        "description": "Specifies whether HTML5 Reciever is to be used."
      }
    },

    "emailAddress": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Specifies the email address that that will be used to request a public SSL certificate for NetScaler gateway from letsencrypt.org on your behalf. This will also be used to notify you when the template has deployed successfully."
      }
    },

    "certificateAuthority": {
      "type": "string",
      "defaultValue": "ACME",
      "allowedValues": [
        "ACME",
        "Enterprise"
      ],
      "metadata": {
        "description": "Specifies whether an ACME CA or the internal Enterprise CA should be used for obtaining certificates."
      }
    },

    "acmeServer": {
      "type": "string",
      "defaultValue": "https://acme-v01.api.letsencrypt.org/",
      "allowedValues": [
        "https://acme-staging.api.letsencrypt.org/",
        "https://acme-v01.api.letsencrypt.org/"
      ],
      "metadata": {
        "description": "Specifies the ACME protocol server used for public TLS certificate requests. Allowed values correspond to letsencrypt.org staging or production."
      }
    },

    "customInboundRules": {
      "type": "object",
      "defaultValue": {
        "rules": [
        ],
        "assignments": {
          "deliveryController": [ ],
          "domainController": [ ],
          "jumpBox": [ ],
          "netScaler": [ ],
          "vda": [ ],
          "vdi": [ ]
        }
      },
      "metadata": {
        "description": "Specifies additional inbound NAT rules to apply in this deployment. Useful for exposing individual machines more directly. The parameter is specified as an object, as in the default. See variable 'loadBalancerSettings' for an example format."
      }
    },

    "customApplications": {
      "type": "object",
      "defaultValue": {
        "chocolateyPackages": [ ],
        "publishedApplications": [ ],
        "appGroups": [ ]
      },
      "metadata": {
        "description": "Specifies additional applications to be installed on the VDA and published through XenApp. The parameter is specified as an array of objects, as in the default. See variables 'applications', 'vdaSettings', and 'storeFrontSettings' for an example format. "
      }
    },

    // Configuration
    "artifactsBaseUrl": {
      "type": "string",
      "metadata": {
        "artifactsBaseUrl": "",
        "description": "Specifies the base location of the child templates and desired state configuration scripts."
      },
      "defaultValue": "https://github.com/AsraFatima/azure-quickstart-templates/raw/master/citrix-xd-site-basic"
    },

    "artifactsBaseUrlSasToken": {
      "type": "securestring",
      "metadata": {
        "description": "Specifies the shared access signature token which provides access to the base artifacts location."
      },
      "defaultValue": ""
    }
  },

  "variables": {
    "artifactsLocation": "[concat(parameters('artifactsBaseUrl'),'/')]",
    "artifactsLocationSasToken": "[parameters('artifactsBaseUrlSasToken')]",
    "deploymentFQDN": "[concat(parameters('publicDnsName'), '.', parameters('location'), '.cloudapp.azure.com')]",
    "gatewayFQDN": "[concat(parameters('publicDnsName'), '-', parameters('location'), '.xenapponazure.com')]",

    "userImageContainerName": "[parameters('userImageContainerName')]",
    "userImageLocation": "[concat('http://', parameters('vhdStorageAccount'), '.blob.core.windows.net/', variables('userImageContainerName'), '/')]",

    "dscVersion": "2.13",

    "vnetName": "VirtualNetwork",
    "vnetAddressRange": "10.0.0.0/16",
    "subnetName": "Subnet",
    "subnetId": "[concat(resourceId('Microsoft.Network/virtualNetworks',variables('vnetName')), '/subnets/', variables('subnetName'))]",
    "dnsServers": [ "[variables('domainControllerSettings').privateIp]" ],

    "subnetAddressRange": "10.0.0.0/20",
    
    "creatingPublicIpUrl": "[concat(variables('artifactsLocation'), 'publicIp-', parameters('publicIpNewOrExisting'), '.json')]",
    "creatingStorageAccountUrl": "[concat(variables('artifactsLocation'), 'storageAccount-', parameters('vhdStorageNewOrExisting'), '.json')]",
    "creatingLoadBalancerUrl": "[concat(variables('artifactsLocation'), 'creatingLoadBalancer.json')]",
    "updatingVnetDnsUrl": "[concat(variables('artifactsLocation'), 'updatingVnetDns.json')]",
    "updatingNicRulesUrl": "[concat(variables('artifactsLocation'), 'updatingNicRules.json')]",
    "updatingInboundRuleUrl": "[concat(variables('artifactsLocation'), 'updatingInboundRule.json')]",

    "availabilitySetName": "AvailabilitySet",
    "availabilitySetId": "[resourceId('Microsoft.Compute/availabilitySets', variables('availabilitySetName'))]",

    "loadBalancerSettings": {
      "name": "LoadBalancer",
      "id": "[resourceId('Microsoft.Network/loadBalancers', 'LoadBalancer')]",
      "lbapid": "[concat( resourceId('Microsoft.Network/loadBalancers','loadBalancer'), '/backendAddressPools/LBBAP')]",
      "rulesPath": "[concat(resourceId('Microsoft.Network/loadBalancers', 'LoadBalancer'), '/inboundNatRules/')]",
      "defaultInboundRules": [
        {
          "name": "ns-http",
          "frontendPort": "[variables('ports').http]",
          "backendPort": 80
        },
        {
          "name": "ns-https",
          "frontendPort": "[variables('ports').https]",
          "backendPort": 11443
        },
        {
          "name": "jump-rdp",
          "frontendPort": 3389,
          "backendPort": 3389
        }
      ]
    },

    "jumpBoxSettings": {
      "templateUri": "[concat(variables('artifactsLocation'), 'creatingJumpBox.json')]",
      "publisher": "MicrosoftWindowsServer",
      "offer": "WindowsServer",
      "sku": "2012-R2-Datacenter",
      "machineName": "XA-JumpBox",
      "machineSize": "Standard_A1",
      "location": "[parameters('location')]",
      "configurationFileUrl": "[concat(variables('artifactsLocation'), 'DSC/JumpBox.ps1.zip')]",
      "configurationFunction": "JumpBox.ps1\\JumpBox",
      "inboundRules": [
        { "id": "[concat(variables('loadBalancerSettings').rulesPath, 'jump-rdp')]" }
      ],
      "shortcuts": [
        "[variables('applications')[0]]",
        "[variables('applications')[1]]",
        "[variables('applications')[2]]",
        "[variables('applications')[3]]",
        "[variables('applications')[4]]"
      ]
    },

    "domainControllerSettings": {
      "templateUri": "[concat(variables('artifactsLocation'), 'creatingDomainController.json')]",
      "publisher": "MicrosoftWindowsServer",
      "offer": "WindowsServer",
      "sku": "2012-R2-Datacenter",
      "machineName": "XA-DC",
      "fqdn": "[concat('XA-DC', '.', parameters('domainName'))]",
      "machineSize": "[parameters('machineSize')]",
      "location": "[parameters('location')]",
      "privateIp": "10.0.0.8",
      "configurationFileUrl": "[concat(variables('artifactsLocation'), 'DSC/DomainController.ps1.zip')]",
      "configurationFunction": "DomainController.ps1\\DomainController",
      "inboundRules": [ ]
    },

    "sqlServerSettings": {
      "machineName": "[variables('deliveryControllerSettings').machineName]",
      "fqdn": "localhost",
      "instance": "SQLEXPRESS"
    },

    "deliveryControllerSettings": {
      "templateUri": "[concat(variables('artifactsLocation'), 'creatingDeliveryController', parameters('imageType'), '.json')]",
      "userImageUri": "[concat(variables('userImageLocation'), 'XD-ALL.vhd')]",
      "publisher": "citrix",
      "offer": "[concat('xenapp-server', parameters('imageQualifier'))]",
      "sku": "bladeserver",
      "machineName": "XA-Controller",
      "fqdn": "[concat('XA-Controller', '.', parameters('domainName'))]",
      "machineSize": "[parameters('machineSize')]",
      "location": "[parameters('location')]",
      "privateIp": "10.0.0.9",
      "configurationFileUrl": "[concat(variables('artifactsLocation'), 'DSC/DeliveryController.ps1.zip')]",
      "configurationFunction": "DeliveryController.ps1\\DeliveryController",
      "inboundRulesInitial": [
        { "id": "[concat(variables('loadBalancerSettings').rulesPath, 'ns-http')]" }
      ],
      "inboundRulesFinal": [ ]
    },

    "licenseServerSettings": {
      "machineName": "[variables('deliveryControllerSettings').machineName]",
      "fqdn": "[variables('deliveryControllerSettings').fqdn]",
      "privateIp": "[variables('deliveryControllerSettings').privateIp]"
    },

    "storeFrontSettings": {
      "machineName": "[variables('deliveryControllerSettings').machineName]",
      "fqdn": "[variables('deliveryControllerSettings').fqdn]",
      "privateIp": "[variables('deliveryControllerSettings').privateIp]",
      "httpPort": "[variables('ports').http]",
      "gatewayName": "NetScaler",
      "themeUri": "[concat(variables('artifactsLocation'), 'Resources/receivertheme.tar.gz')]",
      "html5Mode": "[parameters('html5Mode')]",
      "appGroups": [
        {
          "title": "Administrative Apps",
          "description": "Applications for a XenApp administrator",
          "tile": "appBundle1",
          "category": "Administrative Apps"
        },
        {
          "title": "Remote Desktop Connections",
          "description": "Connect to machines in the XenApp deployment",
          "tile": "appBundle2",
          "category": "Remote Desktop Connections"
        },
        {
          "title": "NetScaler Management",
          "description": "Applications for a NetScaler administrator",
          "tile": "appBundle3",
          "category": "NetScaler Management"
        }
      ]
    },

    "directorSettings": {
      "machineName": "[variables('deliveryControllerSettings').machineName]",
      "fqdn": "[variables('deliveryControllerSettings').fqdn]",
      "privateIp": "[variables('deliveryControllerSettings').privateIp]"
    },

    "netScalerSettings": {
      "templateUri": "[concat(variables('artifactsLocation'), 'creatingNetscaler', parameters('imageType'), '.json')]",
      "userImageUri": "[concat(variables('userImageLocation'), 'NSVPX_Azure_65.24.vhd')]",
      "publisher": "citrix",
      "offer": "[concat('netscalervpx110-6531', parameters('imageQualifier'))]",
      "sku": "netscalerbyol",
      "virtualServerName": "NetScaler",
      "httpsPort": "[variables('ports').netScalerHttps]",
      "httpPort": "[variables('ports').netScalerHttp]",
      "machineName": "XA-NetScaler",
      "location": "[parameters('location')]",
      "fqdn": "[concat('XA-NetScaler', '.', parameters('domainName'))]",
      "machineSize": "[parameters('machineSize')]",
      "privateIp": "10.0.0.11",
      "inboundRulesInitial": [
        { "id": "[concat(variables('loadBalancerSettings').rulesPath, 'ns-https')]" }
      ],
      "inboundRulesFinal": [
        { "id": "[concat(variables('loadBalancerSettings').rulesPath, 'ns-https')]" },
        { "id": "[concat(variables('loadBalancerSettings').rulesPath, 'ns-http')]" }
      ]
    },

    "ports": {
      "http": 80,
      "https": 443,
      "netScalerHttps": 11443,
      "netScalerHttp": 11480
    },

    "paths": {
      "iePath": "%ProgramFiles(x86)%\\Internet Explorer\\iexplore.exe",
      "studioPath": "C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\Citrix\\Citrix Studio.lnk",
      "rdpPath": "C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\Accessories\\Remote Desktop Connection.lnk",
      "storeFrontUrl": "[concat('https://', variables('storeFrontSettings').machineName, '.', parameters('domainName'), '/Citrix/Store')]",
      "directorUrl": "[concat('https://', variables('directorSettings').machineName, '.', parameters('domainName'), '/director')]",
      "netScalerUrl": "[concat('http://', variables('netScalerSettings').privateIp)]"
    },

    "applications": [
      {
        "name": "Domain Controller",
        "category": "Remote Desktop Connections",
        "path": "[variables('paths').rdpPath]",
        "icon": "[variables('paths').rdpPath]",
        "arguments": "[concat('/v:', variables('domainControllerSettings').machineName, '.', parameters('domainName'))]"
      },
      {
        "name": "XenApp Controller",
        "category": "Remote Desktop Connections",
        "path": "[variables('paths').rdpPath]",
        "icon": "[variables('paths').rdpPath]",
        "type": "Shortcut",
        "arguments": "[concat('/v:', variables('deliveryControllerSettings').machineName, '.', parameters('domainName'))]"
      },
      {
        "name": "XenApp VDA",
        "category": "Remote Desktop Connections",
        "path": "[variables('paths').rdpPath]",
        "icon": "[variables('paths').rdpPath]",
        "arguments": "[concat('/v:', 'XA-VDA', '.', parameters('domainName'))]"
      },
      {
        "name": "XenApp Server VDI",
        "category": "Remote Desktop Connections",
        "path": "[variables('paths').rdpPath]",
        "icon": "[variables('paths').rdpPath]",
        "arguments": "[concat('/v:', 'XA-VDI', '.', parameters('domainName'))]"
      },
      {
        "name": "NetScaler Web UI",
        "category": "NetScaler Management",
        "path": "[variables('paths').iePath]",
        "icon": "[variables('paths').iePath]",
        "arguments": "[variables('paths').netScalerUrl]"
      },
      {
        "name": "Citrix Director",
        "category": "Administrative Apps",
        "path": "[variables('paths').iePath]",
        "icon": "[variables('paths').studioPath]",
        "arguments": "[variables('paths').directorUrl]"
      },
      {
        "name": "Citrix Studio",
        "category": "Administrative Apps",
        "path": "[variables('paths').studioPath]",
        "icon": "[variables('paths').studioPath]",
        "type": "Shortcut",
        "arguments": ""
      }
    ],

    "vdaSettings": {
      "templateUri": "[concat(variables('artifactsLocation'), 'creatingVda', parameters('imageType'), '.json')]",
      "userImageUri": "[concat(variables('userImageLocation'), 'XD-VDA.vhd')]",
      "publisher": "citrix",
      "offer": "[concat('xenapp-vda-rdsh', parameters('imageQualifier'))]",
      "sku": "bladevdardsh",
      "vdaPrefix": "XA-VDA",
      "machineSize": "[parameters('machineSize')]",
      "location": "[parameters('location')]",
      "vdaCount": 1,
      "privateIp": "10.0.0.14",
      "configurationFileUrl": "[concat(variables('artifactsLocation'), 'DSC/VDA.ps1.zip')]",
      "configurationFunction": "VDA.ps1\\VDA",
      "inboundRules": [ ],
      "chocolateyPackages": [
      ],
      "publishedApplications": "[variables('applications')]"
    },

    "vdiSettings": {
      "templateUri": "[concat(variables('artifactsLocation'), 'creatingVda', parameters('imageType'), '.json')]",
      "userImageUri": "[concat(variables('userImageLocation'), 'XD-VDI.vhd')]",
      "publisher": "citrix",
      "offer": "[concat('xenapp-vda-vdi', parameters('imageQualifier'))]",
      "sku": "bladevdavdi",
      "vdaPrefix": "XA-VDI",
      "machineSize": "[parameters('machineSize')]",
      "location": "[parameters('location')]",
      "vdaCount": 1,
      "privateIp": "10.0.0.15",
      "configurationFileUrl": "[concat(variables('artifactsLocation'), 'DSC/VDI.ps1.zip')]",
      "configurationFunction": "VDI.ps1\\VDI",
      "inboundRules": [ ],
      "chocolateyPackages": [ ],
      "publishedApplications": [ ]
    }
  },

  "resources": [
    {
      "apiVersion": "2015-06-15",
      "name": "[variables('availabilitySetName')]",
      "type": "Microsoft.Compute/availabilitySets",
      "location": "[parameters('location')]",
      "dependsOn": [ ],
      "tags": {
        "displayName": "AvailabilitySet"
      },
      "properties": {
        "platformFaultDomainCount": 2
      }
    },

    {
      "apiVersion": "2015-06-15",
      "name": "[variables('vnetName')]",
      "type": "Microsoft.Network/virtualNetworks",
      "location": "[parameters('location')]",
      "tags": {
        "displayName": "VirtualNetwork"
      },
      "properties": {
        "addressSpace": {
          "addressPrefixes": [ "[variables('vnetAddressRange')]" ]
        },
        "subnets": [
          {
            "name": "[variables('subnetName')]",
            "properties": {
              "addressPrefix": "[variables('subnetAddressRange')]"
            }
          }
        ]
      }
    },

    {
      "name": "CreatingPublicIp",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2015-01-01",
      "dependsOn": [ ],
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[variables('creatingPublicIpUrl')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          },
          "publicDnsName": {
            "value": "[parameters('publicDnsName')]"
          },
          "publicIpGroup": {
            "value": "[parameters('publicIpGroup')]"
          },
          "publicIpName": {
            "value": "[parameters('publicIpName')]"
          }
        }
      }
    },

    {
      "name": "CreatingStorageAccount",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2015-01-01",
      "dependsOn": [ ],
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[variables('creatingStorageAccountUrl')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          },
          "vhdStorageAccount": {
            "value": "[parameters('vhdStorageAccount')]"
          },
          "vhdStorageType": {
            "value": "[parameters('vhdStorageType')]"
          },
          "vhdStorageGroup": {
            "value": "[parameters('vhdStorageGroup')]"
          }
        }
      }
    },

    {
      "name": "CreatingLoadBalancer",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2015-01-01",
      "dependsOn": [
        "Microsoft.Resources/deployments/CreatingPublicIp",
        "Microsoft.Network/virtualNetworks/virtualNetwork",
        "Microsoft.Compute/availabilitySets/availabilitySet"
      ],
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[variables('creatingLoadBalancerUrl')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "publicIpName": {
            "value": "[parameters('publicIpName')]"
          },
          "publicIpGroup": {
            "value": "[parameters('publicIpGroup')]"
          },
          "loadBalancerName": {
            "value": "[variables('loadBalancerSettings').name]"
          },
          "inboundRules": {
            "value": "[concat(variables('loadBalancerSettings').defaultInboundRules, parameters('customInboundRules').rules)]"
          }
        }
      }
    },

    {
      "name": "UpdatingVnetDns",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2015-01-01",
      "dependsOn": [
        "Microsoft.Resources/deployments/CreatingDomainController"
      ],
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[variables('updatingVnetDnsUrl')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "vnetName": {
            "value": "[variables('vnetName')]"
          },
          "vnetAddressRange": {
            "value": "[variables('vnetAddressRange')]"
          },
          "subnetName": {
            "value": "[variables('subnetName')]"
          },
          "subnetAddressRange": {
            "value": "[variables('subnetAddressRange')]"
          },
          "dnsServers": {
            "value": "[variables('dnsServers')]"
          }
        }
      }
    },

    {
      "name": "CreatingJumpBox",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2015-01-01",
      "dependsOn": [
        "Microsoft.Resources/deployments/CreatingLoadBalancer",
        "Microsoft.Resources/deployments/UpdatingVnetDns",
        "Microsoft.Resources/deployments/CreatingStorageAccount",
        "Microsoft.Resources/deployments/CreatingPublicIp"
      ],
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[variables('jumpBoxSettings').templateUri]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "vhdStorageAccount": {
            "value": "[parameters('vhdStorageAccount')]"
          },
          "machineSize": {
            "value": "[variables('jumpBoxSettings').machineSize]"
          },
          "machineName": {
            "value": "[variables('jumpBoxSettings').machineName]"
          },
          "publisher": {
            "value": "[variables('jumpBoxSettings').publisher]"
          },
          "offer": {
            "value": "[variables('jumpBoxSettings').offer]"
          },
          "sku": {
            "value": "[variables('jumpBoxSettings').sku]"
          },
          "availabilitySetId": {
            "value": "[variables('availabilitySetId')]"
          },
          "subnetId": {
            "value": "[variables('subnetId')]"
          },
          "dnsServers": {
            "value": "[variables('dnsServers')]"
          },
          "lbBapId": {
            "value": "[variables('loadBalancerSettings').lbapid]"
          },
          "lbInboundRules": {
            "value": "[concat(variables('jumpBoxSettings').inboundRules, parameters('customInboundRules').assignments.jumpBox)]"
          },
          "adminUsername": {
            "value": "[parameters('adminUsername')]"
          },
          "adminPassword": {
            "value": "[parameters('adminPassword')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "shortcuts": {
            "value": "[variables('jumpBoxSettings').shortcuts]"
          },
          "artifactsLocationUri": {
            "value": "[variables('artifactsLocation')]"
          },
          "artifactsLocationSasToken": {
            "value": "[variables('artifactsLocationSasToken')]"
          },
          "dscVersion": {
            "value": "[variables('dscVersion')]"
          },
          "configurationFileUrl": {
            "value": "[variables('jumpBoxSettings').configurationFileUrl]"
          },
          "configurationFunction": {
            "value": "[variables('jumpBoxSettings').configurationFunction]"
          }
        }
      }
    },

    {
      "name": "CreatingDomainController",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2015-01-01",
      "dependsOn": [
        "Microsoft.Resources/deployments/CreatingLoadBalancer",
        "Microsoft.Resources/deployments/CreatingStorageAccount",
        "Microsoft.Resources/deployments/CreatingPublicIp"
      ],
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[variables('domainControllerSettings').templateUri]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "vhdStorageAccount": {
            "value": "[parameters('vhdStorageAccount')]"
          },
          "publisher": {
            "value": "[variables('domainControllerSettings').publisher]"
          },
          "offer": {
            "value": "[variables('domainControllerSettings').offer]"
          },
          "sku": {
            "value": "[variables('domainControllerSettings').sku]"
          },
          "machineSize": {
            "value": "[variables('domainControllerSettings').machineSize]"
          },
          "machineName": {
            "value": "[variables('domainControllerSettings').machineName]"
          },
          "privateIp": {
            "value": "[variables('domainControllerSettings').privateIp]"
          },
          "availabilitySetId": {
            "value": "[variables('availabilitySetId')]"
          },
          "subnetId": {
            "value": "[variables('subnetId')]"
          },
          "lbBapId": {
            "value": "[variables('loadBalancerSettings').lbapid]"
          },
          "lbInboundRules": {
            "value": "[concat(variables('domainControllerSettings').inboundRules, parameters('customInboundRules').assignments.domainController)]"
          },
          "domainName": {
            "value": "[parameters('domainName')]"
          },
          "adminUsername": {
            "value": "[parameters('adminUsername')]"
          },
          "adminPassword": {
            "value": "[parameters('adminPassword')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "artifactsLocationUri": {
            "value": "[variables('artifactsLocation')]"
          },
          "artifactsLocationSasToken": {
            "value": "[variables('artifactsLocationSasToken')]"
          },
          "dscVersion": {
            "value": "[variables('dscVersion')]"
          },
          "configurationFileUrl": {
            "value": "[variables('domainControllerSettings').configurationFileUrl]"
          },
          "configurationFunction": {
            "value": "[variables('domainControllerSettings').configurationFunction]"
          }
        }
      }
    },

    {
      "name": "CreatingNetScaler",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2015-01-01",
      "dependsOn": [
        "Microsoft.Resources/deployments/CreatingLoadBalancer",
        "Microsoft.Resources/deployments/CreatingStorageAccount",
        "Microsoft.Resources/deployments/CreatingPublicIp"
      ],
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[variables('netScalerSettings').templateUri]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "vhdStorageAccount": {
            "value": "[parameters('vhdStorageAccount')]"
          },
          "imageUri": {
            "value": "[variables('netScalerSettings').userImageUri]"
          },
          "machineSize": {
            "value": "[variables('netScalerSettings').machineSize]"
          },
          "publisher": {
            "value": "[variables('netScalerSettings').publisher]"
          },
          "offer": {
            "value": "[variables('netScalerSettings').offer]"
          },
          "sku": {
            "value": "[variables('netScalerSettings').sku]"
          },
          "machineName": {
            "value": "[variables('netScalerSettings').machineName]"
          },
          "privateIp": {
            "value": "[variables('netScalerSettings').privateIp]"
          },
          "dnsServers": {
            "value": "[variables('dnsServers')]"
          },
          "availabilitySetId": {
            "value": "[variables('availabilitySetId')]"
          },
          "subnetId": {
            "value": "[variables('subnetId')]"
          },
          "lbBapId": {
            "value": "[variables('loadBalancerSettings').lbapid]"
          },
          "lbInboundRules": {
            "value": "[concat(variables('netScalerSettings').inboundRulesInitial, parameters('customInboundRules').assignments.netScaler)]"
          },
          "adminUsername": {
            "value": "[parameters('adminUsername')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "adminPassword": {
            "value": "[parameters('adminPassword')]"
          }
        }
      }
    },

    {
      "name": "CreatingDeliveryController",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2015-01-01",
      "dependsOn": [
        "Microsoft.Resources/deployments/CreatingNetScaler",
        "Microsoft.Resources/deployments/CreatingStorageAccount",
        "Microsoft.Resources/deployments/CreatingPublicIp"
      ],
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[variables('deliveryControllerSettings').templateUri]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {

          // Infrastructure
          "vhdStorageAccount": {
            "value": "[parameters('vhdStorageAccount')]"
          },
          "imageUri": {
            "value": "[variables('deliveryControllerSettings').userImageUri]"
          },
          "publisher": {
            "value": "[variables('deliveryControllerSettings').publisher]"
          },
          "offer": {
            "value": "[variables('deliveryControllerSettings').offer]"
          },
          "sku": {
            "value": "[variables('deliveryControllerSettings').sku]"
          },
          "machineSize": {
            "value": "[variables('deliveryControllerSettings').machineSize]"
          },
          "machineName": {
            "value": "[variables('deliveryControllerSettings').machineName]"
          },
          "privateIp": {
            "value": "[variables('deliveryControllerSettings').privateIp]"
          },
          "availabilitySetId": {
            "value": "[variables('availabilitySetId')]"
          },
          "subnetId": {
            "value": "[variables('subnetId')]"
          },
          "dnsServers": {
            "value": "[variables('dnsServers')]"
          },
          "lbBapId": {
            "value": "[variables('loadBalancerSettings').lbapid]"
          },
          "lbInboundRules": {
            "value": "[concat(variables('deliveryControllerSettings').inboundRulesInitial, parameters('customInboundRules').assignments.deliveryController)]"
          },

          // Credentials and domain
          "adminUsername": {
            "value": "[parameters('adminUsername')]"
          },
          "adminPassword": {
            "value": "[parameters('adminPassword')]"
          },
          "domainName": {
            "value": "[parameters('domainName')]"
          },
          "domainControllerFQDN": {
            "value": "[variables('domainControllerSettings').fqdn]"
          },
          "domainControllerPrivateIp": {
            "value": "[variables('domainControllerSettings').privateIp]"
          },
          "location": {
            "value": "[parameters('location')]"
          },

          // Delegated servers
          "sqlServerFQDN": {
            "value": "[variables('sqlServerSettings').fqdn]"
          },
          "sqlServerInstance": {
            "value": "[variables('sqlServerSettings').instance]"
          },
          "licenseServerFQDN": {
            "value": "[variables('licenseServerSettings').fqdn]"
          },
          "netScalerPrivateIp": {
            "value": "[variables('netScalerSettings').privateIp]"
          },

          // StoreFront
          "storeFrontFQDN": {
            "value": "[variables('storeFrontSettings').fqdn]"
          },
          "virtualServerName": {
            "value": "[variables('netScalerSettings').virtualServerName]"
          },
          "virtualServerPort": {
            "value": "[variables('netScalerSettings').httpsPort]"
          },
          "forwardServerPort": {
            "value": "[variables('netScalerSettings').httpPort]"
          },
          "storeFrontGatewayName": {
            "value": "[variables('storeFrontSettings').gatewayName]"
          },
          "emailAddress": {
            "value": "[parameters('emailAddress')]"
          },
          "certificateAuthority": {
            "value": "[parameters('certificateAuthority')]"
          },
          "acmeServer": {
            "value": "[parameters('acmeServer')]"
          },
          "gatewayFQDN": {
            "value": "[variables('gatewayFQDN')]"
          },
          "deploymentFQDN": {
            "value": "[variables('deploymentFQDN')]"
          },
          "themeUri": {
            "value": "[variables('storeFrontSettings').themeUri]"
          },
          "html5Mode": {
            "value": "[variables('storeFrontSettings').html5Mode]"
          },
          "appGroups": {
            "value": "[concat(variables('storeFrontSettings').appGroups, parameters('customApplications').appGroups)]"
          },

          // Delivery controller
          "deliveryControllerFQDN": {
            "value": "[concat(variables('deliveryControllerSettings').fqdn)]"
          },
          "siteName": {
            "value": "[parameters('siteName')]"
          },

          // Configuration
          "artifactsLocationUri": {
            "value": "[variables('artifactsLocation')]"
          },
          "artifactsLocationSasToken": {
            "value": "[variables('artifactsLocationSasToken')]"
          },
          "dscVersion": {
            "value": "[variables('dscVersion')]"
          },
          "configurationFileUrl": {
            "value": "[variables('deliveryControllerSettings').configurationFileUrl]"
          },
          "configurationFunction": {
            "value": "[variables('deliveryControllerSettings').configurationFunction]"
          }
        }
      }
    },

    {
      "name": "CreatingVda",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2015-01-01",
      "dependsOn": [
        "Microsoft.Resources/deployments/CreatingLoadBalancer",
        "Microsoft.Resources/deployments/CreatingStorageAccount",
        "Microsoft.Resources/deployments/CreatingPublicIp"
      ],
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[variables('vdaSettings').templateUri]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "vhdStorageAccount": {
            "value": "[parameters('vhdStorageAccount')]"
          },
          "imageUri": {
            "value": "[variables('vdaSettings').userImageUri]"
          },
          "publisher": {
            "value": "[variables('vdaSettings').publisher]"
          },
          "offer": {
            "value": "[variables('vdaSettings').offer]"
          },
          "sku": {
            "value": "[variables('vdaSettings').sku]"
          },
          "machineSize": {
            "value": "[variables('vdaSettings').machineSize]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "machineName": {
            "value": "[variables('vdaSettings').vdaPrefix]"
          },
          "availabilitySetId": {
            "value": "[variables('availabilitySetId')]"
          },
          "subnetId": {
            "value": "[variables('subnetId')]"
          },
          "dnsServers": {
            "value": "[variables('dnsServers')]"
          },
          "privateIp": {
            "value": "[variables('vdaSettings').privateIp]"
          },
          "lbBapId": {
            "value": "[variables('loadBalancerSettings').lbapid]"
          },
          "lbInboundRules": {
            "value": "[concat(variables('vdaSettings').inboundRules, parameters('customInboundRules').assignments.vda)]"
          },
          "domainName": {
            "value": "[parameters('domainName')]"
          },
          "domainControllerFQDN": {
            "value": "[variables('domainControllerSettings').fqdn]"
          },
          "domainControllerIp": {
            "value": "[variables('domainControllerSettings').privateIp]"
          },
          "adminUsername": {
            "value": "[parameters('adminUsername')]"
          },
          "adminPassword": {
            "value": "[parameters('adminPassword')]"
          },
          "deliveryControllerFQDN": {
            "value": "[variables('deliveryControllerSettings').fqdn]"
          },
          "packages": {
            "value": "[concat(variables('vdaSettings').chocolateyPackages, parameters('customApplications').chocolateyPackages)]"
          },
          "publishedApplications": {
            "value": "[concat(variables('vdaSettings').publishedApplications, parameters('customApplications').publishedApplications)]"
          },
          "storeFrontUrl": {
            "value": "[variables('paths').storeFrontUrl]"
          },
          "deploymentFQDN": {
            "value": "[variables('deploymentFQDN')]"
          },
          "gatewayFQDN": {
            "value": "[variables('gatewayFQDN')]"
          },
          "artifactsLocationUri": {
            "value": "[variables('artifactsLocation')]"
          },
          "artifactsLocationSasToken": {
            "value": "[variables('artifactsLocationSasToken')]"
          },
          "dscVersion": {
            "value": "[variables('dscVersion')]"
          },
          "configurationFileUrl": {
            "value": "[variables('vdaSettings').configurationFileUrl]"
          },
          "configurationFunction": {
            "value": "[variables('vdaSettings').configurationFunction]"
          }
        }
      }
    },

    {
      "name": "CreatingVdi",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2015-01-01",
      "dependsOn": [
        "Microsoft.Resources/deployments/CreatingLoadBalancer",
        "Microsoft.Resources/deployments/CreatingStorageAccount",
        "Microsoft.Resources/deployments/CreatingPublicIp"
      ],
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[variables('vdiSettings').templateUri]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "vhdStorageAccount": {
            "value": "[parameters('vhdStorageAccount')]"
          },
          "imageUri": {
            "value": "[variables('vdiSettings').userImageUri]"
          },
          "publisher": {
            "value": "[variables('vdiSettings').publisher]"
          },
          "offer": {
            "value": "[variables('vdiSettings').offer]"
          },
          "sku": {
            "value": "[variables('vdiSettings').sku]"
          },
          "machineSize": {
            "value": "[variables('vdiSettings').machineSize]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "machineName": {
            "value": "[variables('vdiSettings').vdaPrefix]"
          },
          "availabilitySetId": {
            "value": "[variables('availabilitySetId')]"
          },
          "subnetId": {
            "value": "[variables('subnetId')]"
          },
          "dnsServers": {
            "value": "[variables('dnsServers')]"
          },
          "privateIp": {
            "value": "[variables('vdiSettings').privateIp]"
          },
          "lbBapId": {
            "value": "[variables('loadBalancerSettings').lbapid]"
          },
          "lbInboundRules": {
            "value": "[concat(variables('vdiSettings').inboundRules, parameters('customInboundRules').assignments.vdi)]"
          },
          "domainName": {
            "value": "[parameters('domainName')]"
          },
          "domainControllerFQDN": {
            "value": "[variables('domainControllerSettings').fqdn]"
          },
          "adminUsername": {
            "value": "[parameters('adminUsername')]"
          },
          "adminPassword": {
            "value": "[parameters('adminPassword')]"
          },
          "deliveryControllerFQDN": {
            "value": "[variables('deliveryControllerSettings').fqdn]"
          },
          "domainControllerIp": {
            "value": "[variables('domainControllerSettings').privateIp]"
          },
          "packages": {
            "value": "[variables('vdiSettings').chocolateyPackages]"
          },
          "publishedApplications": {
            "value": "[variables('vdiSettings').publishedApplications]"
          },
          "storeFrontUrl": {
            "value": "[variables('paths').storeFrontUrl]"
          },
          "deploymentFQDN": {
            "value": "[variables('deploymentFQDN')]"
          },
          "gatewayFQDN": {
            "value": "[variables('gatewayFQDN')]"
          },
          "artifactsLocationUri": {
            "value": "[variables('artifactsLocation')]"
          },
          "artifactsLocationSasToken": {
            "value": "[variables('artifactsLocationSasToken')]"
          },
          "dscVersion": {
            "value": "[variables('dscVersion')]"
          },
          "configurationFileUrl": {
            "value": "[variables('vdiSettings').configurationFileUrl]"
          },
          "configurationFunction": {
            "value": "[variables('vdiSettings').configurationFunction]"
          }
        }
      }
    },

    {
      "name": "UpdatingInboundRules",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2015-01-01",
      "dependsOn": [
        "Microsoft.Resources/deployments/CreatingDeliveryController"
      ],
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[variables('updatingInboundRuleUrl')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "loadBalancerName": {
            "value": "[variables('loadBalancerSettings').name]"
          },
          "loadBalancerId": {
            "value": "[variables('loadBalancerSettings').id]"
          },
          "inboundRuleName": {
            "value": "ns-http"
          },
          "frontendPort": {
            "value": "[variables('ports').http]"
          },
          "backendPort": {
            "value": "[variables('netScalerSettings').httpPort]"
          }
        }
      }
    },

    {
      "name": "UpdatingDeliveryControllerNic",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2015-01-01",
      "dependsOn": [
        "Microsoft.Resources/deployments/UpdatingInboundRules"
      ],
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[variables('updatingNicRulesUrl')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "nicName": {
            "value": "[reference('CreatingDeliveryController').outputs.nicName.value]"
          },
          "privateIp": {
            "value": "[variables('deliveryControllerSettings').privateIp]"
          },
          "subnetId": {
            "value": "[variables('subnetId')]"
          },
          "lbBapId": {
            "value": "[variables('loadBalancerSettings').lbapid]"
          },
          "rules": {
            "value": "[concat(variables('deliveryControllerSettings').inboundRulesFinal, parameters('customInboundRules').assignments.deliveryController)]"
          }
        }
      }
    },

    {
      "name": "UpdatingNetScalerNic",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2015-01-01",
      "dependsOn": [
        "Microsoft.Resources/deployments/UpdatingDeliveryControllerNic"
      ],
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[variables('updatingNicRulesUrl')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "nicName": {
            "value": "[reference('CreatingNetScaler').outputs.nicName.value]"
          },
          "privateIp": {
            "value": "[variables('netScalerSettings').privateIp]"
          },
          "subnetId": {
            "value": "[variables('subnetId')]"
          },
          "lbBapId": {
            "value": "[variables('loadBalancerSettings').lbapid]"
          },
          "rules": {
            "value": "[concat(variables('netScalerSettings').inboundRulesFinal, parameters('customInboundRules').assignments.netScaler)]"
          }
        }
      }
    }
  ],
  "outputs": {
    "netScalerGateway": {
      "type": "string",
      "value": "[concat('https://', variables('gatewayFQDN'))]"
    }
  }
}
